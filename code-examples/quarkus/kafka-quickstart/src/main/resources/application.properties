# Quarkus config
quarkus.ssl.native=true

# Configure the Kafka sink (we write to it)
mp.messaging.outgoing.generated-price.connector=smallrye-kafka
mp.messaging.outgoing.generated-price.topic=prices
mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer

# Configure the Kafka source (we read from it)
mp.messaging.incoming.prices.connector=smallrye-kafka
mp.messaging.incoming.prices.topic=prices
mp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer

# Configure docker config
quarkus.container-image.builder=docker
quarkus.kubernetes.deployment-target=kubernetes
quarkus.container-image.build=true
quarkus.container-image.push=true

## Service binding configuration used by default for dev and production profiles

quarkus.kubernetes-service-binding.root=/bindings

## dev-env profile using environment variables
## ./mvnw package -Dquarkus.profile=dev-env

dev-env.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
dev-env.kafka.security.protocol=SASL_SSL

dev-env.kafka.sasl.mechanism=OAUTHBEARER
kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
dev-env.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

## sbo-env profile using service binding capabilities with env vars provided by service binding operator.
## ./mvnw package -Dquarkus.profile=sbo-env

sbo-env.kafka.bootstrap.servers=${KAFKACONNECTION_BOOTSTRAPSERVERS}
sbo-env-sbo.kafka.security.protocol=SASL_SSL

sbo-env.kafka.sasl.mechanism=PLAIN
sbo-env.kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
  username="${KAFKACONNECTION_USER}" \
  password="${KAFKACONNECTION_PASSWORD}" 

