# Quarkus config
quarkus.ssl.native=true

# Configure the Kafka sink (we write to it)
mp.messaging.outgoing.generated-price.connector=smallrye-kafka
mp.messaging.outgoing.generated-price.topic=prices
mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer

# Configure the Kafka source (we read from it)
mp.messaging.incoming.prices.connector=smallrye-kafka
mp.messaging.incoming.prices.topic=prices
mp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer

# Configure docker config
quarkus.container-image.builder=docker
quarkus.kubernetes.deployment-target=kubernetes
quarkus.container-image.build=false
quarkus.container-image.push=false

## dev profile using user defined environment variables that uses SASL/OAUTHBEARER
## ./mvnw quarkus:dev 
## ./mvnw package -Dquarkus.profile=dev

%dev.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%dev.kafka.security.protocol=SASL_SSL

%dev.kafka.sasl.mechanism=OAUTHBEARER
%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

## sbo profile using service binding capabilities with with env vars provided by service binding operator.
## This profile also demos how to connect using SASL/PLAIN credentials
## ./mvnw package -Dquarkus.profile=sbo

%sbo.kafka.bootstrap.servers=${KAFKACONNECTION_BOOTSTRAPSERVERS}
%sbo.kafka.security.protocol=SASL_SSL

%sbo.kafka.sasl.mechanism=PLAIN
%sbo.kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
  username="${KAFKACONNECTION_USER}" \
  password="${KAFKACONNECTION_PASSWORD}"; 

## sbo-dev profile that can be used for local development when using 
## service binding configuration (using .bindingroot/kafka values instead of env vars)

%sbo-dev.quarkus.kubernetes-service-binding.root=./.bindingroot
