# Configure the incoming `quotes` Kafka topic
mp.messaging.incoming.quotes.connector=smallrye-kafka
mp.messaging.incoming.quotes.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.quotes.apicurio.registry.use-specific-avro-reader=true
mp.messaging.incoming.quotes.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider

%dev.mp.messaging.incoming.quotes.apicurio.auth.service.token.endpoint=${RHOAS_OAUTH_TOKEN_URL:https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token}
%dev.mp.messaging.incoming.quotes.apicurio.auth.client.id=${RHOAS_CLIENT_ID}
%dev.mp.messaging.incoming.quotes.apicurio.auth.client.secret=${RHOAS_CLIENT_SECRET}

mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${SERVICE_REGISTRY_URL}${SERVICE_REGISTRY_CORE_PATH}

%test.quarkus.apicurio-registry.devservices.port=8888

##Kafka servers and auth configuration

%dev.kafka.bootstrap.servers=${KAFKA_HOST}
%dev.kafka.security.protocol=SASL_SSL

%dev.kafka.sasl.mechanism=OAUTHBEARER
%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${RHOAS_CLIENT_ID}" \
  oauth.client.secret="${RHOAS_CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${RHOAS_OAUTH_TOKEN_URL}" ;
%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
